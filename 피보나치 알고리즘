1. 기본적인 재귀함수로 fib 풀기(Recursion)
# 재귀함수를 두개를 동시에 호출해서 메모리를 많이 차치할수있음
# Time Complexity = O(2^n)
def fib(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-1)+fib(n-2)


num = int(input())
print(fib(num))

2. 단순 for문(Iterative)
# 순차적으로 계산
# Time Complexity = O(n)
def fibo(n):
    if n < 2:
        return n

    a, b = 0, 1
    for i in range(n-1):
        a, b = b, a + b

    return b


for n in range(1, 11):
    print(n, fibo(n))
    
# Dynamic Programming의 좋은점은 중복되는 계산이 없다. 그래서 위에방법들보다 훨씬 효율적
3. Dynamic Programming - Iterative
# Time Complexity = O(n)
# 앞에서부터 쌓아가는 느낌?
# n을 100이라고 하자.
def fibo(n):
    if n < 2:
        return n
    cache = [0 for _ in range(n+1)]
    cache[1] = 1
    
    for i in range(2, 100+1):
        cache[i] = cache[i-1] + cache[i-2]

    return cache[n]

>>> print(fibo(100))

4. Dynamic Programming - Recursion
# Time Complexity = O(n)
def fibo(n):
    cache = [-1 for _ in range(n+1)]

    def iterate(n):
    	# 기저사례 1.
    	if i < 2:
	    return i

	# 기저사례 2.
        if cache[n] != -1:
	    return cache[n]

	# 기저사례 충족 못할 시 값을 실제로 구함
	cache[n] = iterate(n-1) + iterate(n-2)
	return cache[n]

    return iterate(n)
    

for n in range(1, 11):
    print(n, fibo(n))


5. Using Matrix
# Time Complexity = O(log n)
def fibo(n):
  Size=2
  Zero = [[1,0],[0,1]] #행렬의 항등원
  Base = [[1,1],[1,0]] #곱셈을 시작해 나갈 기본 행렬
  
  def matrix_mul(a,b, size= Size):
    new = [[0 for _ in range(size)] _ in range(size)]
    
    for i in range(size):
      for j in range(size):
        for k in range(size):
          new[i][j] += a[i][k] * b[k][j]
          
    return new
  
#기본행렬을 n번 곱한행렬을 만든다
#이런 느낌의 피보나치 점화식이 나온다.
#Base라는 행렬이 계속 제곱이 되는 느낌임
(An+1) = (1 1) * (An  ) = (An + An-1)
(An  )   (1 0)   (An-1)   (    An   )
def get_nth(n):
  matrix = Zero.copy()
  k = 0
  tmp = Base.copy()
  
  while 2**k <=n:
    if n &(1<<k) !=0:
      matrix = square_matrix_mul(matrix, tmp)
    k+=1
    tmp = square_matrix_mul(tmp,tmp)
  return matrix
  
return get_nth(n)[1][0]


6. 일반항 사용
# Time Complexity = O(log n)

def fibo(n):
    sqrt_5 = 5 ** (1/2)
    ans = 1 / sqrt_5 * ( ((1 + sqrt_5) / 2) ** n  - ((1 - sqrt_5) / 2) ** n )
    return int(ans)


fibo(100)
